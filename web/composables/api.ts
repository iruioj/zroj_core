// generated by server/src/bin/gen_docs.rs
// DO NOT EDIT.

import type { AsyncData } from "nuxt/app";
import type { FetchError } from "ofetch";

export function useAPI(path: "post:/auth/login", payload: {username: string;passwordHash: string;}): Promise<AsyncData<void, FetchError>>;
export function useAPI(path: "post:/auth/logout"): Promise<AsyncData<void, FetchError>>;
export function useAPI(path: "post:/auth/register", payload: {email: string;username: string;passwordHash: string;}): Promise<AsyncData<void, FetchError>>;
export function useAPI(path: "get:/auth/info"): Promise<AsyncData<{username: string;email: string;}, FetchError>>;
export function useAPI(path: "get:/user", query: {username: string;}): Promise<AsyncData<{id: number;username: string;email: string;motto: string;name: string;register_time: string;gender: "Male" | "Female" | "Others" | "Private";}, FetchError>>;
export function useAPI(path: "get:/user/edit"): Promise<AsyncData<{id: number;username: string;email: string;motto: string;name: string;register_time: string;gender: "Male" | "Female" | "Others" | "Private";}, FetchError>>;
export function useAPI(path: "post:/user/edit", payload: {password_hash: string | undefined;email: string | undefined;motto: string | undefined;name: string | undefined;gender: "Male" | "Female" | "Others" | "Private" | undefined;}): Promise<AsyncData<void, FetchError>>;
export function useAPI(name: string, args?: any): Promise<any> {
    if (process.client) {
        console.log('client call api', name, args)
    }
    const [method, slug] = name.split(':');
    const path = useRuntimeConfig().public.apiBase + slug;

    const options = {
        server: false, // 这只会降低首次加载的体验
        key: name,
        method: method as any,
        credentials: 'include' as any,
        headers: useRequestHeaders(['cookie'])
    };
    if (args === undefined) {
        return useFetch(path, options);
    } else if (method === 'get') {
        return useFetch(path, { ...options, query: args });
    } else {
        return useFetch(path, { ...options, body: args });
    }
}

