// generated by server/src/bin/gen_docs.rs
// DO NOT EDIT.

import type { AsyncData } from "nuxt/app";
import type { FetchError } from "ofetch";

function callAPI(method: string, path: string, args?: any): Promise<any> {
    if (process.client) {
        console.log('client call api', method, path, args)
    }
    path = useRuntimeConfig().public.apiBase + path;

    const options = {
        server: false, // 这只会降低首次加载的体验
        key: method + ":" + path,
        method: method as any,
        credentials: 'include' as any,
        headers: useRequestHeaders()
    };
    if (args === undefined) {
        return useFetch(path, options);
    } else if (method === 'get') {
        return useFetch(path, { ...options, query: args });
    } else if (args instanceof FormData) {
        return useFetch(path, { ...options, body: args});
    } else {
        return useFetch(path, { ...options, body: args });
    }
}
type AlignKind = (AlignKindCenter|AlignKindLeft|AlignKindNone|AlignKindRight);
type AlignKindCenter = "center";
type AlignKindLeft = "left";
type AlignKindNone = "none";
type AlignKindRight = "right";
type AuthInfoRes = {email:string;username:Username;};
type BlockQuote = {children:Node[];};
type Break = {};
type Code = {lang:(null|string);meta:(null|string);value:string;};
type Definition = {identifier:string;label:(null|string);title:(null|string);url:string;};
type Delete = {children:Node[];};
type Elapse = number;
type Emphasis = {children:Node[];};
type FileDescriptor = ("Stdin"|"Stdout"|{Named:string;});
type FootnoteDefinition = {children:Node[];identifier:string;label:(null|string);};
type FootnoteReference = {identifier:string;label:(null|string);};
type GravatarInfo = {email:string;no_cache:(null|boolean);};
type Heading = {children:Node[];depth:number;};
type Html = {value:string;};
type IOKind = ("StdIO"|{FileIO:{input:FileDescriptor;output:FileDescriptor;};});
type Image = {alt:string;title:(null|string);url:string;};
type ImageReference = {alt:string;identifier:string;label:(null|string);reference_kind:ReferenceKind;};
type InlineCode = {value:string;};
type InlineMath = {value:string;};
type Link = {children:Node[];title:(null|string);url:string;};
type LinkReference = {children:Node[];identifier:string;label:(null|string);reference_kind:ReferenceKind;};
type List = {children:Node[];ordered:boolean;spread:boolean;start:(null|number);};
type ListItem = {checked:(null|boolean);children:Node[];spread:boolean;};
type LoginPayload = {passwordHash:string;username:Username;};
type Math = {meta:(null|string);value:string;};
type Memory = number;
type MetasQuery = {max_count:number;max_id:(null|number);min_id:(null|number);pattern:(null|string);};
type Node = (NodeBlockQuote|NodeBreak|NodeCode|NodeDefinition|NodeDelete|NodeEmphasis|NodeFootnoteDefinition|NodeFootnoteReference|NodeHeading|NodeHtml|NodeImage|NodeImageReference|NodeInlineCode|NodeInlineMath|NodeLink|NodeLinkReference|NodeList|NodeListItem|NodeMath|NodeParagraph|NodeRoot|NodeStrong|NodeTable|NodeTableCell|NodeTableRow|NodeText|NodeThematicBreak|NodeToml|NodeTwoColumns|NodeYaml);
type NodeBlockQuote = (BlockQuote&{type:"blockquote";});
type NodeBreak = (Break&{type:"break";});
type NodeCode = (Code&{type:"code";});
type NodeDefinition = (Definition&{type:"definition";});
type NodeDelete = (Delete&{type:"delete";});
type NodeEmphasis = (Emphasis&{type:"emphasis";});
type NodeFootnoteDefinition = (FootnoteDefinition&{type:"footnoteDefinition";});
type NodeFootnoteReference = (FootnoteReference&{type:"footnoteReference";});
type NodeHeading = (Heading&{type:"heading";});
type NodeHtml = (Html&{type:"html";});
type NodeImage = (Image&{type:"image";});
type NodeImageReference = (ImageReference&{type:"imageReference";});
type NodeInlineCode = (InlineCode&{type:"inlineCode";});
type NodeInlineMath = (InlineMath&{type:"inlineMath";});
type NodeLink = (Link&{type:"link";});
type NodeLinkReference = (LinkReference&{type:"linkReference";});
type NodeList = (List&{type:"list";});
type NodeListItem = (ListItem&{type:"listItem";});
type NodeMath = (Math&{type:"math";});
type NodeParagraph = (Paragraph&{type:"paragraph";});
type NodeRoot = (Root&{type:"root";});
type NodeStrong = (Strong&{type:"strong";});
type NodeTable = (Table&{type:"table";});
type NodeTableCell = (TableCell&{type:"tableCell";});
type NodeTableRow = (TableRow&{type:"tableRow";});
type NodeText = (Text&{type:"text";});
type NodeThematicBreak = (ThematicBreak&{type:"thematicBreak";});
type NodeToml = (Toml&{type:"toml";});
type NodeTwoColumns = (TwoColumns&{type:"twoColumns";});
type NodeYaml = (Yaml&{type:"yaml";});
type Paragraph = {children:Node[];};
type PostDataReturn = {id:number;};
type ProblemKind = ("Interactive"|"SubmitAnswer"|{Traditional:IOKind;});
type ProfileQuery = {username:Username;};
type ReferenceKind = (ReferenceKindCollapsed|ReferenceKindFull|ReferenceKindShortcut);
type ReferenceKindCollapsed = "collapsed";
type ReferenceKindFull = "full";
type ReferenceKindShortcut = "shortcut";
type RegisterPayload = {email:string;passwordHash:string;username:Username;};
type Root = {children:Node[];};
type Statement = {meta:StmtMeta;statement:Node;};
type StmtMeta = {kind:(ProblemKind|null);memory:(Memory|null);time:(Elapse|null);title:string;};
type StmtQuery = {id:number;};
type Strong = {children:Node[];};
type Table = {align:AlignKind[];children:Node[];};
type TableCell = {children:Node[];};
type TableRow = {children:Node[];};
type Text = {value:string;};
type ThematicBreak = {};
type Toml = {value:string;};
type TwoColumns = {left:Node;right:Node;};
type UserDisplayInfo = {email:string;gender:number;id:number;motto:string;name:string;register_time:string;username:Username;};
type UserEditInfo = {email:string;gender:number;id:number;motto:string;name:string;register_time:string;username:string;};
type UserUpdateInfo = {email:(null|string);gender:(null|number);motto:(null|string);name:(null|string);password_hash:(null|string);};
type Username = string;
type Yaml = {value:string;};
export function useAPI () { return { auth: { login: { post: (payload: AuthLoginPostPayload) => callAPI("post", "/auth/login", payload) as Promise<AsyncData<void, FetchError>>,
 },
logout: { post: () => callAPI("post", "/auth/logout") as Promise<AsyncData<void, FetchError>>,
 },
register: { post: (payload: AuthRegisterPostPayload) => callAPI("post", "/auth/register", payload) as Promise<AsyncData<void, FetchError>>,
 },
info: { get: () => callAPI("get", "/auth/info") as Promise<AsyncData<AuthInfoGetReturn | null, FetchError>>,
 },
 },
user: { get: (payload: UserGetPayload) => callAPI("get", "/user", payload) as Promise<AsyncData<UserGetReturn | null, FetchError>>,
edit: { get: () => callAPI("get", "/user/edit") as Promise<AsyncData<UserEditGetReturn | null, FetchError>>,
post: (payload: UserEditPostPayload) => callAPI("post", "/user/edit", payload) as Promise<AsyncData<void, FetchError>>,
 },
gravatar: { get: (payload: UserGravatarGetPayload) => callAPI("get", "/user/gravatar", payload) as Promise<AsyncData<void, FetchError>>,
 },
 },
problem: { full_dbg: { get: () => callAPI("get", "/problem/full_dbg") as Promise<AsyncData<ProblemFullDbgGetReturn | null, FetchError>>,
 },
metas: { get: (payload: ProblemMetasGetPayload) => callAPI("get", "/problem/metas", payload) as Promise<AsyncData<ProblemMetasGetReturn | null, FetchError>>,
 },
statement: { get: (payload: ProblemStatementGetPayload) => callAPI("get", "/problem/statement", payload) as Promise<AsyncData<ProblemStatementGetReturn | null, FetchError>>,
 },
fulldata: { post: (payload: ProblemFulldataPostPayload) => callAPI("post", "/problem/fulldata", payload) as Promise<AsyncData<ProblemFulldataPostReturn | null, FetchError>>,
 },
 },
 }; }
export type AuthInfoGetReturn = AuthInfoRes;
export type AuthLoginPostPayload = LoginPayload;
export type AuthRegisterPostPayload = RegisterPayload;
export type ProblemFullDbgGetReturn = [number,StmtMeta][];
export type ProblemFulldataPostPayload = FormData;
export type ProblemFulldataPostReturn = PostDataReturn;
export type ProblemMetasGetPayload = MetasQuery;
export type ProblemMetasGetReturn = [number,StmtMeta][];
export type ProblemStatementGetPayload = StmtQuery;
export type ProblemStatementGetReturn = Statement;
export type UserEditGetReturn = UserEditInfo;
export type UserEditPostPayload = UserUpdateInfo;
export type UserGetPayload = ProfileQuery;
export type UserGetReturn = UserDisplayInfo;
export type UserGravatarGetPayload = GravatarInfo;

