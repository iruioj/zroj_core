// generated by server/src/bin/gen_docs.rs
// DO NOT EDIT.

import type { AsyncData } from "nuxt/app";
import type { FetchError } from "ofetch";

function callAPI(method: string, path: string, args?: any): Promise<any> {
    if (process.client) {
        console.log('client call api', method, path, args)
    }
    path = useRuntimeConfig().public.apiBase + path;

    const options = {
        server: false, // 这只会降低首次加载的体验
        key: method + ":" + path,
        method: method as any,
        credentials: 'include' as any,
        headers: useRequestHeaders()
    };
    if (args === undefined) {
        return useFetch(path, options);
    } else if (method === 'get') {
        return useFetch(path, { ...options, query: args });
    } else {
        return useFetch(path, { ...options, body: args });
    }
}
export function useAPI () { return { auth: { login: { post: (payload: {username: string;passwordHash: string;}) => callAPI("post", "/auth/login", payload) as Promise<AsyncData<void, FetchError>>,
 },
logout: { post: () => callAPI("post", "/auth/logout") as Promise<AsyncData<void, FetchError>>,
 },
register: { post: (payload: {email: string;username: string;passwordHash: string;}) => callAPI("post", "/auth/register", payload) as Promise<AsyncData<void, FetchError>>,
 },
info: { get: () => callAPI("get", "/auth/info") as Promise<AsyncData<{username: string;email: string;}, FetchError>>,
 },
 },
user: { get: (payload: {username: string;}) => callAPI("get", "/user", payload) as Promise<AsyncData<{id: number;username: string;email: string;motto: string;name: string;register_time: string;gender: "Male" | "Female" | "Others" | "Private";}, FetchError>>,
edit: { get: () => callAPI("get", "/user/edit") as Promise<AsyncData<{id: number;username: string;email: string;motto: string;name: string;register_time: string;gender: "Male" | "Female" | "Others" | "Private";}, FetchError>>,
post: (payload: {password_hash?: string;email?: string;motto?: string;name?: string;gender?: "Male" | "Female" | "Others" | "Private";}) => callAPI("post", "/user/edit", payload) as Promise<AsyncData<void, FetchError>>,
 },
 },
problem: { full_dbg: { get: () => callAPI("get", "/problem/full_dbg") as Promise<AsyncData<[number,{title: string;time?: number;memory?: number;kind?: {Traditional: "StdIO" | {FileIO: {input: "Stdin" | "Stdout" | {Named: string};output: "Stdin" | "Stdout" | {Named: string};}}} | "Interactive" | "SubmitAnswer";}][], FetchError>>,
 },
statement: { get: (payload: {id: number;}) => callAPI("get", "/problem/statement", payload) as Promise<AsyncData<{ statement: any; meta: {title: string;time?: number;memory?: number;kind?: {Traditional: "StdIO" | {FileIO: {input: "Stdin" | "Stdout" | {Named: string};output: "Stdin" | "Stdout" | {Named: string};}}} | "Interactive" | "SubmitAnswer";};}, FetchError>>,
 },
 },
 }; }
