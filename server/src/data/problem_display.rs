//! 用于前端显示的题目数据，与测试数据无关

use crate::ProblemID;
use judger::sandbox::{Elapse, Memory};
use serde::{Deserialize, Serialize};
use std::path::PathBuf;

/// 题面数据
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Data {
    /// 题面描述
    statement: Statement,
    /// 题目元数据
    meta: Meta,
}

/// problem statement, stored in self.statement_path
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Statement {
    Markdown(StatementSource),
    LaTex(StatementSource),
    /// load from an pdf asset
    Pdf(PathBuf),
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum StatementSource {
    /// custom layout
    Legacy(String),
    /// standard form, consists of several parts(html) and will be rendered in a different format
    Standard {
        /// problem background & description
        legend: String,
        /// input format
        input_format: String,
        /// output format
        output_format: String,
        /// notes & constraints & case/subtask specification
        notes: String,
        /// examples, either user input or generated by running a testcase
        examples: String,
    },
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Meta {
    pub id: ProblemID,
    pub time_limit: Elapse,
    pub memory_limit: Memory,
    /// problem type
    pub problem_type: ProblemType,
    pub tags: Vec<String>,
}

/// for traditional problem
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum IOType {
    /// read from stdin, write to stdout
    StdIO,
    /// specify files to read and write
    /// some.in, some.out
    FileIO(String, String),
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ProblemType {
    /// Traditional, also supports NOI style interactive problem
    Traditional(IOType),
    /// I/O Interactive Problem
    Interactive,
    /// Submit answer only
    SubmitAnswer,
    Custom(String),
}
