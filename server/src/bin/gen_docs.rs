use server::app;

/// 添加 overload function declaration
fn gen_nuxt_wrapper(service: server::ServiceDoc) -> String {
    let mut r = String::new();

    service.apis.into_iter().for_each(|api| {
        let path = api.method.clone() + ":" + &service.path + &api.path;
        let res_ty = api.res_type.unwrap_or("void".into());
        let res_ty = format!("Promise<AsyncData<{res_ty}, FetchError>>");
        // some invalid case
        if api.query_type.is_some() && api.body_type.is_some() {
            panic!("query conflict with body payload")
        }
        if api.query_type.is_some() && api.method != "get" {
            panic!("query should not by used for non-get api")
        }
        if api.method == "get" && api.body_type.is_some() {
            panic!("body should not by used for get api")
        }

        if let Some(ty) = api.body_type {
            r += &format!(
                "export function useAPI(path: {path:?}, payload: {ty}): {res_ty};\n"
            );
        } else if let Some(ty) = api.query_type {
            r += &format!(
                "export function useAPI(path: {path:?}, query: {ty}): {res_ty};\n"
            );
        } else {
            r += &format!("export function useAPI(path: {path:?}): {res_ty};\n");
        }
    });

    r
}

fn gen_nuxt_basic() -> String {
    r#"export function useAPI(name: string, args?: any): Promise<any> {
    if (process.client) {
        console.log('client call api', name, args)
    }
    const [method, slug] = name.split(':');
    const path = useRuntimeConfig().public.apiBase + slug;

    const options = {
        server: false, // 这只会降低首次加载的体验
        key: name,
        method: method as any,
        credentials: 'include' as any,
        headers: useRequestHeaders(['cookie'])
    };
    if (args === undefined) {
        return useFetch(path, options);
    } else if (method === 'get') {
        return useFetch(path, { ...options, query: args });
    } else {
        return useFetch(path, { ...options, body: args });
    }
}
"#
    .into()
}

fn main() {
    let mut code = String::from(r#"// generated by server/src/bin/gen_docs.rs
// DO NOT EDIT.

import type { AsyncData } from "nuxt/app";
import type { FetchError } from "ofetch";

"#);
    code += &gen_nuxt_wrapper(app::auth::service_doc());
    code += &gen_nuxt_wrapper(app::user::service_doc());
    code += &gen_nuxt_basic();
    println!("{code}");
}
